#
# Makefile for the Broadcom DSLCPE's WLAN modules.
# 

#
# The default configuration to use
# this is selectable, please change according to 
# the desired configuration
#
ifeq ($(strip $(CONFIG_BCM_WLAN_USBAP)), y)
DEFAULT_CONFIG := wlconfig_lx_wl_dslcpe_usb_ap
else 
ifeq ($(strip $(BRCM_CHIP)),6368)
DEFAULT_CONFIG := wlconfig_lx_wl_dslcpe_pci_ap_1gn
else
DEFAULT_CONFIG := wlconfig_lx_wl_dslcpe_pci_ap_2n
endif
endif

# the following line forces EXTRA_CFLAGS to be recursivley defined variable
# (which is required by all of the WL builds).
ifneq ($(EXTRA_CFLAGS),)
$(warning EXTRA_CFLAGS IS NOT EMPTY ($(EXTRA_CFLAGS)))
endif
EXTRA_CFLAGS =

# Add -smp and -wapi for smd and wapi build, to generate final default config
DEFAULT_CONFIG_EXT := $(DEFAULT_CONFIG)
subver := 
ifeq ($(strip $(CONFIG_BCM_WAPI)),y)
$(info ===========WAPI enable ==========)
DEFAULT_CONFIG_EXT := $(addsuffix -wapi, $(DEFAULT_CONFIG_EXT))
subver +=-wapi
endif
ifeq ($(strip $(CONFIG_SMP)),y)
$(info ===========SMP enable ==========)
DEFAULT_CONFIG_EXT := $(addsuffix -smp, $(DEFAULT_CONFIG_EXT))
subver +=-smp
endif
$(warning ===========DEFAULT_CONFIG=$(DEFAULT_CONFIG) ==========)
$(warning ===========DEFAULT_CONFIG_EXT=$(DEFAULT_CONFIG_EXT) ==========)

# generate version suffix
empty=
space=$(empty) $(empty)
subver := $(subst $(space),,$(subver))
$(info subver====$(subver)=====)

#
#open objects are provided source format
#
OPEN_OBJS =  wl/sys/wl_linux_dslcpe.o

#OPEN_OBJS should be consisten with WLFILES:Should be auto filtered
ifneq (,$(findstring usb, $(strip $(obj))))
OPEN_OBJS += shared/linux_osl.o shared/bcmutils.o
else
OPEN_OBJS += shared/bcmsrom.o shared/linux_osl.o shared/bcmutils.o
endif

#
#excluded files which is not part of the driver
#
EXCLUDED_FILES := shared/wl_linux.c

#
#driver prefix
#
DRIVER_PREFIX=wl

wldrv-objs :=
use_lib :=

ifeq ($(strip $(WLSRCBASE)),)
###########################################
#
# the wl root dir executes only here
#
###########################################
export WLSRCBASE= $(obj)
export WLCFGDIR = $(obj)/wl/config

export WLBASE	= wl
export SHBASE	= shared
export COBASE	= bcmcrypto
export EMFBASE  = emf/emf
export IGSBASE  = emf/igs
ifeq ($(strip $(BRCM_CHIP)),6362)
export OVERRIDEBASE = wl/sys/6362
endif

#setup $(INSTALL_DIR)/etc/wlan
$(shell	if [ ! -d $(INSTALL_DIR)/etc/wlan ]; then \
        rm -f $(INSTALL_DIR)/etc/wlan; \
        install -d $(INSTALL_DIR)/etc/wlan; \
        fi	;)
		
#setup and enumerate config files
BUILDDIR = build
WLDSLCPEPREFIX = wlconfig_lx_wl_dslcpe_
export WLDSLCPEPREFIXUSB = $(WLDSLCPEPREFIX)usb_
ifeq ($(strip $(CONFIG_BCM_WLAN_USBAP)), y)
export WLCFGPREFIX = $(WLDSLCPEPREFIX)usb_
else
export WLCFGPREFIX = $(WLDSLCPEPREFIX)pci_
endif

export BUILDDIRPREFIX = wlobj-
export DEFAULT_OBJ_NAME=$(BUILDDIRPREFIX)$(DEFAULT_CONFIG_EXT)-$(BRCM_CHIP).o_save

#hardcoded relative path from builddir to the root dir
export WLSRCBASE_REL = ../..

#check if source is available
export SOURCE_AVAIL= $(shell if [ -e $(obj)/wl/sys/wlc.c ]; then echo 1; else echo 0; fi ;)
export WMF_AVAIL= $(shell if [ -e $(obj)/wl/sys/wlc_wmf.c ]; then echo 1; else echo 0; fi ;)

#define name of the last to build dir
LAST_TO_BUILD = $(WLCFGPREFIX)zdefault

#setup build sub directory for each config
$(shell install -d $(BUILDDIR))

$(shell cd $(WLSRCBASE)/..; ./make_version.sh $(WLSRCBASE) $(subver))
include $(WLSRCBASE)/epivers
export DSLCPE_WLAN_VERSION = $(EPI_VERSION_STR)
EXTRA_CFLAGS += -DDSLCPE_WLAN_VERSION=\"$(DSLCPE_WLAN_VERSION)\"
EXTRA_CFLAGS += $(BRCM_WERROR_CFLAGS)

ifeq ($(strip $(SOURCE_AVAIL)), 1)
   ifeq ($(strip $(RELEASE_BUILD)), 1)
      $(info echo rel_wl_impl=${CONFIG_BCM_WLAN_IMPL})
      $(shell echo rel_wl_impl=${CONFIG_BCM_WLAN_IMPL} > $(WLSRCBASE)/rimpl)
      wl_config_files := $(filter $(WLCFGPREFIX)%, $(notdir $(wildcard $(WLSRCBASE)/$(WLBASE)/config/*)))

      ifeq ($(strip $(CONFIG_BCM_WAPI)),y)
          wl_config_files := $(addsuffix -wapi, $(wl_config_files))
      endif

      ifeq ($(strip $(CONFIG_SMP)),y)
          wl_config_files := $(addsuffix -smp, $(wl_config_files))
      endif

      $(warning wl_config_files ===========$(wl_config_files)===================)
      ifeq ($(strip $(BRCM_CHIP)),6368)
#         wl_config_files += $(filter $(WLDSLCPEPREFIXUSB)%, $(notdir $(wildcard $(WLSRCBASE)/$(WLBASE)/config/*)))
      endif
   else
      wl_config_files = $(DEFAULT_CONFIG_EXT)
   endif

   ifeq ($(strip $(WMF_AVAIL)), 1)
      $(foreach config, $(wl_config_files), \
      $(shell install -d $(WLSRCBASE)/$(BUILDDIR)/$(BUILDDIRPREFIX)$(config)/$(EMFBASE); \
      install -d $(WLSRCBASE)/$(BUILDDIR)/$(BUILDDIRPREFIX)$(config)/$(IGSBASE)))
   endif

   $(foreach config, $(wl_config_files), \
   $(shell install -d $(WLSRCBASE)/$(BUILDDIR)/$(BUILDDIRPREFIX)$(config); \
   install -d $(WLSRCBASE)/$(BUILDDIR)/$(BUILDDIRPREFIX)$(config)/$(COBASE); \
   install -d $(WLSRCBASE)/$(BUILDDIR)/$(BUILDDIRPREFIX)$(config)/$(SHBASE); \
   install -d $(WLSRCBASE)/$(BUILDDIR)/$(BUILDDIRPREFIX)$(config)/$(WLBASE); \
   install -d $(WLSRCBASE)/$(BUILDDIR)/$(BUILDDIRPREFIX)$(config)/$(WLBASE)/sys; \
   install -d $(WLSRCBASE)/$(BUILDDIR)/$(BUILDDIRPREFIX)$(config)/$(WLBASE)/phy; \
   ln -sf $(WLSRCBASE_REL)/Makefile $(WLSRCBASE)/$(BUILDDIR)/$(BUILDDIRPREFIX)$(config)/Makefile; \
   chmod 777 -R  $(WLSRCBASE)/$(BUILDDIR)))

   ifneq ($(strip $(OVERRIDEBASE)),)
      $(foreach config, $(wl_config_files), \
      $(shell install -d $(WLSRCBASE)/$(BUILDDIR)/$(BUILDDIRPREFIX)$(config)/$(OVERRIDEBASE); \
      install -d $(WLSRCBASE)/$(BUILDDIR)/$(BUILDDIRPREFIX)$(config)/$(OVERRIDEBASE)))
   endif   
   
   #sym link to the default config, this should be the last directory to build
   #define a virtual build configuration as the last one to build
   export LAST_TO_BUILD_DIR = $(WLSRCBASE)/$(BUILDDIR)/$(BUILDDIRPREFIX)$(LAST_TO_BUILD)

   $(shell rm -f $(BUILDDIRPREFIX)$(config)$(DEFAULT_CONFIG_EXT) $(LAST_TO_BUILD_DIR))   
      
   #####test, for built in ######
   ifneq ($(strip $(CONFIG_BCM_WLAN)),y)   
      #add to wl_config_files
      $(shell ln -sf $(BUILDDIRPREFIX)$(config)$(DEFAULT_CONFIG_EXT) $(LAST_TO_BUILD_DIR))   
      wl_config_files += $(LAST_TO_BUILD)
   endif
   #####test, for built in ######
   
   #enum dirs
   wl_subdirs = $(foreach dir, $(wildcard $(WLSRCBASE)/$(BUILDDIR)/wlobj*), $(lastword $(subst $(BRCM_CHIP)/, , $(dir)))/)
   $(warning wl_subdirs ===========$(wl_subdirs)===================)
   #make the build sub-folders
   obj-$(CONFIG_BCM_WLAN) += $(wl_subdirs)
else  #not source_avail
   include $(WLCFGDIR)/$(DEFAULT_CONFIG)
   include $(WLCFGDIR)/wl.mk
   obj-$(CONFIG_BCM_WLAN) += $(DRIVER_PREFIX).o
   $(DRIVER_PREFIX)-objs += $(DRIVER_PREFIX)_dep.o  $(OPEN_OBJS)
   $(obj)/$(DRIVER_PREFIX)_dep.o: build_srom_map
	  cp -f $(WLSRCBASE)/$(DEFAULT_OBJ_NAME) $(obj)/$(DRIVER_PREFIX)_dep.o
   $(warning "======================================$(DEFAULT_OBJ_NAME)=========================")
endif
	
else

# This wlan makefile is reentrant, and EXTRA_CFLAGS is cleared before
# we hit this point.  Redefining version here
EXTRA_CFLAGS += -DDSLCPE_WLAN_VERSION=\"$(DSLCPE_WLAN_VERSION)\"
EXTRA_CFLAGS += $(BRCM_WERROR_CFLAGS)

###########################################
#
# the build sub dirs execute here
#
###########################################
$(warning ===building $(obj) wireless driver===)      
   ifeq ($(strip $(LAST_TO_BUILD_DIR)), $(strip $(obj)))
       ifneq ($(strip $(CONFIG_BCM_WLAN)),y)
          $(shell cp -f $(obj)/../$(BUILDDIRPREFIX)$(config)$(DEFAULT_CONFIG_EXT)/$(DRIVER_PREFIX).o $(WLSRCBASE))
          include $(WLCFGDIR)/$(DEFAULT_CONFIG)
          include $(WLCFGDIR)/wl.mk
          obj-$(CONFIG_BCM_WLAN) += $(DRIVER_PREFIX).o
          $(DRIVER_PREFIX)-objs += $(DRIVER_PREFIX)_dep.o  $(OPEN_OBJS)
          $(obj)/$(DRIVER_PREFIX)_dep.o: build_srom_map
	  cp -f $(WLSRCBASE)/$(DEFAULT_OBJ_NAME) $(obj)/$(DRIVER_PREFIX)_dep.o
       else
          $(warning echo $(strip $(CONFIG_BCM_WLAN)) do nothing)
          #do nothing
       endif
   else 
      obj-$(CONFIG_BCM_WLAN) += $(notdir $(obj)).o
     
      # Find the base config file name
      dir_tmp:=$(strip $(subst $(BUILDDIRPREFIX), ,$(notdir $(obj))))
      $(warning dir_tmp =$(dir_tmp)===)
      dir_tmp := $(subst -wapi,,$(dir_tmp))
      dir_tmp := $(subst -smp,,$(dir_tmp))
      $(warning dir_tmp=$(dir_tmp)====)

      include $(WLCFGDIR)/$(dir_tmp)
      #include $(WLCFGDIR)/$(strip $(subst $(BUILDDIRPREFIX), ,$(notdir $(obj))))
      include $(WLCFGDIR)/wl.mk
      $(notdir $(obj))-objs = $(wldrv-objs)
   
      ###########################################
      #
      # build library here
      #
      ###########################################
      #automatic collect files to if not using library
      #include all files
      wl_files += $(wildcard $(WLSRCBASE)/$(WLBASE)/sys/*.c $(WLSRCBASE)/$(WLBASE)/phy/*.c $(WLSRCBASE)/$(SHBASE)/*.c  $(WLSRCBASE)/$(COBASE)/*.c)
      ifeq ($(WMF), 1)   
        wl_files += $(wildcard $(WLSRCBASE)/$(EMFBASE)/*.c $(WLSRCBASE)/$(IGSBASE)/*.c)
      endif

      ifneq ($(strip $(OVERRIDEBASE)),)
         #replacing files from OVERRODEBASE
         subst_files = $(notdir $(wildcard $(WLSRCBASE)/$(OVERRIDEBASE)/*.c))
         orig_files = $(foreach file, $(subst_files), $(wildcard $(WLSRCBASE)/$(WLBASE)/sys/$(file)))
         
         wl_files_after_remove_orig = $(filter-out $(orig_files), $(wl_files))
         wl_files := $(wl_files_after_remove_orig)
         wl_files += $(wildcard $(WLSRCBASE)/$(OVERRIDEBASE)/*.c)   
      endif
   
      WLFILES += $(DSLCPE_WLFILES)
      #find all the files specified in WLFILES
      full_named_files=$(foreach file, $(WLFILES), $(filter %$(file),$(wl_files)))
      
      #strip leading paths to this dir
      unsorted_short_named_files = $(subst $(WLSRCBASE)/, , $(full_named_files))
      short_named_files=$(sort $(unsorted_short_named_files))
      
      #remove exceptions files
      wl_drivers_files = $(foreach file, $(short_named_files), $(filter-out $(foreach unwanted, $(EXCLUDED_FILES), $(unwanted)), $(file)))  
   
      #translate suffix from .c to .o
      wl_drivers_object_files = $(wl_drivers_files:.c=.o)
      
      #add each file, instead of a long string, make it easy to kernel build procedure
      wldrv-objs += $(foreach m_object, $(wl_drivers_object_files),$(firstword $(m_object)))
   
      #
      # create sw link for the build dirs, invoked from build dirs
      #
   
      $(foreach file, $(wl_drivers_files), $(eval $(shell echo files=$(wldrv-objs:.o=.c); test ! -e $(obj)/$(file) && ln -sf $(WLSRCBASE)/$(file) $(obj)/$(file))))
   
      #
      # build the driver library
      #
      wldrv-objs += dummy.o
      $(obj)/dummy.o: $(shell touch $(obj)/dummy.c) build_library
	$(CC) $(KBUILD_CFLAGS) $(EXTRA_CFLAGS) -c $(obj)/dummy.c -o $@ 

      # open objects are not included in the library
      wl_lib_objects = $(foreach file, $(wl_drivers_object_files), $(filter-out $(foreach unwanted, $(OPEN_OBJS) dummy.o, $(unwanted)), $(file)))
      #$(error $(wl_lib_objects))

      .PHONY : build_library 
      build_library: $(addprefix $(obj)/, $(wl_lib_objects))
	$(LD) $(ld_flags) $(LDFLAGS_MODULE) -r -m elf32btsmip -o $(obj)/wldrvlib.o  $^
	cp -f $(obj)/wldrvlib.o $(WLSRCBASE)/$(notdir $(obj))-$(BRCM_CHIP).o_save

      $(warning WLFILES = $(sort $(WLFILES)))
      $(warning WLFLAGS = $(sort $(WLFLAGS)))
      $(warning EXTRA_CFLAGS = $(sort $(EXTRA_CFLAGS)))   
      $(warning wldrv-objs= $(wl_drivers_object_files))	
      $(warning ===============================)
   endif
endif

#
# srom files
#
.PHONY : build_srom_map $(SUPPORTED_CHIPS)

build_srom_map : $(SUPPORTED_CHIPS)

$(SUPPORTED_CHIPS):
	rm -f $(obj)/shared/bcm$@_map.bin
	if [ ! -e $(obj)/shared/bcm$@_map.c ]; then \
		ln -sf $(WLSRCBASE)/shared/bcm$@_map.c $(obj)/shared/bcm$@_map.c; \
	fi ;
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -c -o $(obj)/shared/bcm$@_map.o $(obj)/shared/bcm$@_map.c
	$(OBJCOPY) -j .data -O binary $(obj)/shared/bcm$@_map.o $(obj)/shared/bcm$@_map.bin
	install -m 755 $(obj)/shared/bcm$@_map.bin $(INSTALL_DIR)/etc/wlan
	
	


